name: Build Live Image with Custom Kernel and Initrd

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get install -y wget
        sudo apt-get install -y build-essential fakeroot libncurses5-dev libssl-dev ccache bison flex libelf-dev libudev-dev libpci-dev libiberty-dev debhelper dpkg-dev debootstrap gpg debian-archive-keyring
        
        wget https://ftp.debian.org/debian/pool/main/l/live-build/live-build_20240810_all.deb
        sudo dpkg -i live-build_20240810_all.deb
    - name: Download and Compile Custom Kernel
      run: |
          KERNEL_VERSION=6.10.7
          wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
          tar -xvf linux-${KERNEL_VERSION}.tar.xz
          cd linux-${KERNEL_VERSION}
          make defconfig
          sed -i 's/# CONFIG_IPU_BRIDGE is not set/CONFIG_IPU_BRIDGE=y/' .config
          sed -i 's/# CONFIG_VIDEO_INTEL_IPU6 is not set/CONFIG_VIDEO_INTEL_IPU6=y/' .config
          sed -i 's/# CONFIG_INTEL_VSC is not set/CONFIG_INTEL_VSC=y/' .config
          sed -i 's/# CONFIG_VIDEO_IPU3_CIO2 is not set/CONFIG_VIDEO_IPU3_CIO2=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP is not set/CONFIG_VIDEO_ATOMISP=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP_OV2722 is not set/CONFIG_VIDEO_ATOMISP_OV2722=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP_GC2235 is not set/CONFIG_VIDEO_ATOMISP_GC2235=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP_MSRLIST_HELPER is not set/CONFIG_VIDEO_ATOMISP_MSRLIST_HELPER=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP_MT9M114 is not set/CONFIG_VIDEO_ATOMISP_MT9M114=y/' .config
          sed -i 's/# CONFIG_VIDEO_ATOMISP_GC0310 is not set/CONFIG_VIDEO_ATOMISP_GC0310=y/' .config
          echo "CONFIG_IPU_BRIDGE=y" >> .config
          echo "CONFIG_VIDEO_INTEL_IPU6=y" >> .config
          echo "CONFIG_INTEL_VSC=y" >> .config
          echo "CONFIG_VIDEO_IPU3_CIO2=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP_OV2722=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP_GC2235=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP_MSRLIST_HELPER=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP_MT9M114=y" >> .config
          echo "CONFIG_VIDEO_ATOMISP_GC0310=y" >> .config
          make -j$(nproc) bindeb-pkg
          # Move the kernel packages to a known location
          mkdir -p ../custom-kernel-debs
          mv ../*.deb ../custom-kernel-debs/
          ls -al ../custom-kernel-debs/
    - name: Create Custom Initrd
      run: |
          KERNEL_VERSION=6.10.7
          
          # Install necessary tools
          sudo apt-get install -y initramfs-tools
          
          # Create a temporary directory for initrd creation
          mkdir -p custom_initrd
          cd custom_initrd
          
          # Install the custom kernel modules
          sudo dpkg -i ../custom-kernel-debs/linux-image-${KERNEL_VERSION}_*.deb
          
          # Create the initrd with the custom kernel modules
          sudo mkinitramfs -o ../initrd.img-${KERNEL_VERSION}-custom ${KERNEL_VERSION}-custom
          
          # Move back to the main directory
          cd ..

    - name: Configure live-build for Debian with Custom Kernel and Initrd
      run: |
        mkdir -p live-build
        cd live-build
        
        # Initialize live-build configuration
        sudo lb config --distribution bookworm --archive-areas "main contrib non-free" --debian-installer none
        
        # Create necessary directories
        mkdir -p config/packages.chroot config/package-lists config/hooks/normal config/includes.chroot/etc/default

        # Copy custom kernel .deb files to live-build package directory
        cp ../custom-kernel-debs/*.deb config/packages.chroot/
        
        # Copy custom initrd to live-build package directory
        cp ../initrd.img-6.10.7-custom config/packages.chroot/
        
        # Create package list
        cat << EOF > config/package-lists/my.list.chroot
        efivar
        efibootmgr
        grub-pc
        grub-efi-amd64
        linux-image-amd64
        EOF
        
        # Create GRUB default configuration
        echo 'GRUB_TIMEOUT=5' > config/includes.chroot/etc/default/grub
        
        # Create a hook to install custom kernel and update initramfs
        cat << EOF > config/hooks/normal/0100-update-initramfs.hook.chroot
        #!/bin/sh
        set -e
        
        # Install linux-firmware package to address missing firmware warnings
        apt-get update
        apt-get install -y linux-firmware
        
        # Install the custom kernel
        dpkg -i /config/packages.chroot/linux-image-6.10.7_*.deb
        
        # Update initramfs for the new kernel
        update-initramfs -c -k 6.10.7
        
        # Update GRUB configuration
        update-grub
        EOF
        
        chmod +x config/hooks/normal/0100-update-initramfs.hook.chroot

    - name: Build Debian Live ISO
      run: |
        cd live-build
        sudo lb clean
        sudo lb config
        sudo lb build
      continue-on-error: true

    - name: Display build logs
      if: always()
      run: |
        cd live-build
        if [ -f .build/logs/binary ]; then
          echo "Binary build log:"
          cat .build/logs/binary
        fi
        if [ -f .build/logs/chroot ]; then
          echo "Chroot build log:"
          cat .build/logs/chroot
        fi

    - name: Check for ISO file
      run: |
        if [ -f live-build/live-image-amd64.hybrid.iso ]; then
          echo "ISO file created successfully"
        else
          echo "Error: ISO file not created"
          ls -R live-build
          exit 1
        fi

    - name: Upload Live ISO
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: debian-live-custom-kernel-initrd.iso
        path: live-build/live-image-amd64.hybrid.iso

    - name: Clean up
      if: always()
      run: |
        cd live-build
        sudo lb clean
        sudo rm -rf chroot
